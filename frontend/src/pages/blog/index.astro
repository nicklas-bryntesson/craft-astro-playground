---
import Layout from '../../layouts/Layout.astro';
import { craftClient } from '../../lib/graphql';
import { getPreviewStatus, PreviewScript } from '../../lib/preview';
import { BLOG_QUERY } from '../../queries/blog.mjs';
import { getPaginationData } from '../../lib/pagination';
import Pagination from '../../components/Pagination.astro';
import Teaser from '../../components/Teaser.astro';
import ContentBlocks from '../../components/ContentBlocks.astro';

const preview = getPreviewStatus(Astro.url);
const currentPage = parseInt(Astro.url.searchParams.get('page') || '') || 1;
const itemsPerPage = 4;

const data = await craftClient.query(BLOG_QUERY, {
  limit: itemsPerPage,
  offset: (currentPage - 1) * itemsPerPage
}, {
  previewToken: preview.token
});

const blogPage = data?.blogEntries?.[0];
const posts = data?.blogPostsEntries || [];
const totalPosts = data?.entryCount || 0;
const { totalPages } = getPaginationData(currentPage, totalPosts, itemsPerPage);

const pageTitle = totalPages > 1 
  ? `${blogPage?.title || 'Blog'} - Page ${currentPage} of ${totalPages}`
  : blogPage?.title || 'Blog';
---

<Layout title={pageTitle}>
  <main class="">
    {blogPage && (
      <header class="">
        <h1 class="">{blogPage.title}</h1>
        {blogPage.pageSubheading && (
          <p class="">{blogPage.pageSubheading}</p>
        )}
      </header>
    )}
    {blogPage?.pageContent?.chunks && (
      <div class="pageContent prose">
        <ContentBlocks chunks={blogPage.pageContent.chunks} />
      </div>
    )}


    <section class="relatedContent">
      {posts.length > 0 ? (
        <div class="teaserContainer">
          {posts.map((post: any, index: any) => (
            <Teaser 
              entry={post}
              featured={index === 0 && currentPage === 1}
            />
          ))}
        </div>
      ) : (
        <div class="">
          No posts found
        </div>
      )}
      {totalPages > 1 && (
        <Pagination 
          currentPage={currentPage}
          totalPages={totalPages}
        />
      )}
    </section>


  </main>
</Layout>

<Fragment set:html={PreviewScript({ isPreview: preview.isPreview })} />


<style scoped>
  :where(main) {
    display: grid;
    grid-template-columns: var(--centerGrid--columns);

    & > * {
      grid-column: main;
    }

    & .relatedContent {
      --_gridColumns: repeat(auto-fit, minmax(min(16rem, 100%), 1fr));

      margin-inline: auto;
      grid-column: 1/-1;
      display: grid;
      grid-template-columns: var(--centerGrid--columns);

      > .teaserContainer {
        grid-column: main;
        display: grid;
        grid-template-columns: var(--_gridColumns);
        gap:1rem;
      }
    }
  }


</style>