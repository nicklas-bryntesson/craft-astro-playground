---
import './Card.tokens.css'
import LinkButton from "./LinkButton.astro";
import Notification from "./Notification.astro";

interface Props {
	theme?: "default" | "pinkish" | "golden";
	title: string;
	content: string;
	linkOneUrl?: string;
	linkOneText?: string;
	class?: string;
}

const {
	theme = "default",
	title,
	content,
	linkOneUrl,
	linkOneText,
	class: customClasses,
} = Astro.props;

const errors: string[] = [];
const allowedThemes = ["default", "pinkish", "golden"];
if (!allowedThemes.includes(theme)) {
	errors.push(
		`Invalid theme "${theme}". Allowed themes: ${allowedThemes.join(", ")}.`,
	);
}
---

{
	errors.length > 0 ? (
		<Notification type="danger" title="Component Error" text={errors.join(" | ")} />
	) : (
		<article class:list={["Card", customClasses]} data-theme={theme}>
			<header>
				<figure>
					<svg>
						<use xlink:href="#icon-image"></use>
					</svg>
				</figure>
				<h3>{title}</h3>
			</header>

			<div class="content">
				<Fragment set:html={content} />
			</div>

			<footer>
				{linkOneUrl && (
					<LinkButton
						href={linkOneUrl}
						type="primary"
						size="medium"
						text={linkOneText || ""}
					/>
				)}
			</footer>
		</article>
	)
}

<style>
:where(.Card) {
  --_borderRadius: var(--card--borderRadius--outer);
  --_gap: var(--card--gap);
  --_padding: var(--card--padding);
  --_maxWidth: 26rem;

  display: flex;
  flex-direction: column;
  inline-size: 100%;
  max-inline-size: var(--_maxWidth);
  background-color: var(--_backgroundColor);
  border: 0.0625rem solid var(--_borderColor);
  border-radius: var(--_borderRadius);
  overflow: hidden;
  padding-block-end: var(--_padding);

  > header {
    > figure {
      aspect-ratio: var(--aspectRatio--golden);
      background-color: var(--_borderColor);
      margin-block-start: var(--_padding);
      margin-inline: var(--_padding);
      border-radius: var(--card--borderRadius--inner);
      display: grid;
      place-items: center;

      > svg {
        opacity: 0.2;
        inline-size: 2.5rem;
      }

      & img {
        inline-size: 100%;
        block-size: 100%;
        object-fit: cover;
      }
    }

    > h2,
    > h3,
    > h4,
    > h5,
    > h6 {
      margin-block-start: var(--_gap);
      padding-inline: var(--_padding);
      color: var(--_colorPrimary);

      > * {
        color: inherit;
      }
    }
  }

  & > .content {
    padding-inline: var(--_padding);
    margin-block-start: var(--_gap);

    > p {
      color: var(--_colorSecondary);

      &:last-of-type {
        margin-block-end: 0;
      }
    }
  }

  > footer {
    margin-block-start: auto;
    padding-block-start: var(--_gap);
    padding-inline: var(--_padding);
  }

  &[data-theme="default"] {
    --_colorPrimary: var(--card--color--primary--default);
    --_colorSecondary: var(--card--color--secondary--default);
    --_backgroundColor: var(--card--backgroundColor--default);
    --_borderColor: var(--card--borderColor--default);
  }

  &[data-theme="pinkish"] {
    /* this component */
    --_colorPrimary: var(--card--color--primary--pinkish);
    --_colorSecondary: var(--card--color--secondary--pinkish);
    --_backgroundColor: var(--card--backgroundColor--pinkish);
    --_borderColor: var(--card--borderColor--pinkish);

    /* other components inside */
    --button--theme--color--primary: var(--button--primary--color--pinkish);
    --button--theme--backgroundColor--primary: var(
      --button--primary--backgroundColor--pinkish
    );
    --button--theme--borderColor--primary: var(
      --button--primary--borderColor--pinkish
    );
  }

  /* prettier-ignore */
  &[data-theme="golden"] {
      --_colorPrimary: var(--card--color--primary--golden);
      --_colorSecondary: var(--card--color--secondary--golden);
      --_backgroundColor: var(--card--backgroundColor--golden);
      --_borderColor: var(--card--borderColor--golden);
  
      --button--theme--backgroundColor--primary: var(--card--accentColor--golden);
      --button--theme--borderColor--primary: var(--card--accentColor--golden);
    }
}
</style>