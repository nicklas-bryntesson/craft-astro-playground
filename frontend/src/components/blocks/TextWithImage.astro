---
import './TextWithImage.tokens.css';

const { block } = Astro.props;

const verticalTextAlignment = block.verticalTextAlignment || 'top';
const image = block.image?.[0];
const imageAlignment = block.horisontalImageAlignment || 'right';
const imageAspectRatio = block.aspectRatio || 'landscape';
const blockLayout = block.blockLayout || 'wide';
const blockSurface = blockLayout === 'full' ? block.blockSurface?.class : undefined;
---

<div 
    class="TextWithImage Block" 
    data-surface={blockSurface}
    data-layout={blockLayout}
    data-vertical-text-alignment={verticalTextAlignment}
    data-image-alignment={imageAlignment} 
    data-image-aspect-ratio={imageAspectRatio}
>
    <div class="Component">
        <div class="content">
            {block.title && <h2>{block.title}</h2>}
            <div set:html={block.textContentBlock.html}></div>
        </div>

        {blockSurface ? (
            <figure class="image">
                <img src={image.mainImageUrl} alt={block.title || ''} width={image.mainImageWidth} height={image.mainImageHeight} loading="lazy" />
            </figure>
        ) : (
            <figure class="imageWithBlur">
                <div class="foreground">
                    <img src={image.mainImageUrl} alt={block.title || ''} width={image.mainImageWidth} height={image.mainImageHeight} loading="lazy" />
                </div>
                <div class="blur">
                    <img src={image.blur} alt="" width={image.blurWidth} height={image.blurHeight} loading="lazy" aria-hidden="true" />
                </div>
            </figure>
        )}
    </div>
</div>


<style is:global>
    .TextWithImage {
        margin-inline: 0;
    }

    .Block .content {
        padding-block-start: var(--_paddingBlockStart);
        padding-block-end: var(--_paddingBlockEnd);
    }

</style>

<style scoped>
.TextWithImage {
    --_gridColumns: var(--textImage--gridColumns--wide);
    --_gridGap: var(--textImage--gridGap--wide);
    
    &[data-layout="full"] {
        --_gridColumns: var(--textImage--gridColumns--full);
        --_gridGap: var(--textImage--gridGap--full);
    }
    &[data-image-aspect-ratio="landscape"] {
        --_aspectRatio:  16/9;
    }

    &[data-image-aspect-ratio="landscape"] {
        --_aspectRatio:  16/9;
    }
    &[data-image-aspect-ratio="portrait"] {
        --_aspectRatio: 3/4;
    }
    &[data-image-aspect-ratio="square"] {
        --_aspectRatio: 1;
    }
    &[data-image-aspect-ratio="golden"] {
        --_aspectRatio: 1.618/1;
    }

    & .Component {
        display: grid;
        grid-template-columns: var(--_gridColumns);
        column-gap: var(--_gridGap);

        & .content {
            grid-row: 1;
            display: flex;
            flex-direction: column;

            & h2 {
                margin-block-end: var(--size--lg);
            }
        }

        & .image {
            position: relative;
            grid-row: 1;
            overflow: hidden;
            height: 100%;

            > img {
                position: absolute;
                inset: 0;
                inline-size: 100%;
                block-size: 100%;
                object-fit: cover;
            }
        }

        .imageWithBlur {
            grid-row: 1;
            display: grid;
            grid: [stack] 100% / [stack] 100%;
            inline-size: 100%;
            margin-block: auto;

            > .foreground {
                position: relative;
                grid-area: stack;
                width: 100%;
                z-index: 2;
                aspect-ratio: 4/5;

                > img {
                    position: absolute;
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                }
            }
            > .blur {
                position: relative;
                grid-area: stack;
                inline-size: 100%;
                aspect-ratio: 4/5;

                &::before {
                    position: absolute;
                    inset: 0;
                    z-index: 999999;
                    inline-size: 100%;
                    block-size: 100%;
                    background-color: aqua;
                }

                > img {
                    position: absolute;
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    padding: 10%;
                    inset-block-start: 10%;
                    opacity: 0.7;
                    filter: blur(20px);
                }
            }
        }
    }

    &[data-surface="surface-1"],
    &[data-surface="surface-2"],
    &[data-surface="surface-3"] {

    }

    &[data-surface="surface-1"] .Component {
        background-color: var(--COLOR--N10);
    }
    &[data-surface="surface-2"] .Component {
        background-color: var(--COLOR--B05);
    }

    &[data-surface="surface-3"] .Component {
        background-color: var(--COLOR--B90);
    }

    &[data-vertical-text-alignment="top"] .content {
        justify-content: start;
    }
    &[data-vertical-text-alignment="middle"] .content {
        justify-content: center;
    }
    &[data-vertical-text-alignment="bottom"] .content {
        justify-content: end;
    }

    &[data-image-alignment="right"] {
        & .content {
            grid-column: 3/8;
        }

        & .image {
            grid-column: 11/15;
/*             border-start-start-radius: 1rem;
            border-end-start-radius: 1rem; */
        }

        & .imageWithBlur {
            grid-column: 11/15;
        }
    }

    &[data-image-alignment="left"] {
        & .content {
            grid-column: 6/12;
        }

        & .image {
            grid-column: 1/5;

            & img {
/*                 border-start-end-radius: 1rem;
                border-end-end-radius: 1rem; */
            }
        }

        & .imageWithBlur {
            grid-column: 1/5;
        }
    }
}
</style>