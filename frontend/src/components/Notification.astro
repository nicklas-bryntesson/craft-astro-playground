---
import './Notification.tokens.css';
interface Props {
	id?: string;
	type?: string;
	title?: string;
	text: string;
}

const { id, type = 'default', title, text } = Astro.props;

const validTypes = ['info', 'success', 'caution', 'danger'];
const iconType = validTypes.includes(type) ? type : 'default';
const ariaRole = type === 'danger' ? 'alert' : 'status';
const ariaLive = type === 'danger' ? 'assertive' : 'polite';
---
<aside
    id={id}
    class="Notification"
    role={ariaRole}
    aria-live={ariaLive}
    data-type={iconType}
>
    <div class="icon">
        <svg aria-hidden="true" focusable="false" width="24" height="24">
            <use href={`#icon-${iconType}`}></use>
        </svg>
    </div>

    <div class="content">
        {title && <strong>{title}</strong>}
        <Fragment set:html={text} />
    </div>
</aside>

<style scoped>
.Notification {
  --_borderWidth: var(--notification--borderWidth);
  --_iconSize: var(--notification--iconSize);

  padding: 1rem;
  background-color: var(--_backgroundColor);
  border-radius: 0.3rem;
  border-inline-start: var(--_borderWidth) solid var(--_accentColor);
  margin-block-end: 2rem;
  inline-size: 100%;
  max-inline-size: 50rem;
  display: grid;
  grid-template-columns: auto 1fr;
  column-gap: 2rem;

  > .icon {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    > svg {
      color: var(--_iconColor);
      inline-size: var(--_iconSize);
      block-size: var(--_iconSize);
    }
  }

  > .content {
    display: flex;
    flex-direction: column;
    gap: 1rem;

    > strong {
      color: var(--_colorPrimary);
      font-family: var(--fontFamily--heading);
      margin-block: 0;
    }
  }

  &[data-type="default"] {
    --_accentColor: var(--notification--borderColor--default);
    --_backgroundColor: var(--notification--backgroundColor--default);
    --_iconColor: var(--notification--borderColor--default);
    --_colorPrimary: var(--notification--color--primary--default);
  }

  &[data-type="info"] {
    --_accentColor: var(--notification--borderColor--info);
    --_iconColor: var(--notification--borderColor--info);
    --_backgroundColor: var(--notification--backgroundColor--info);
    --_colorPrimary: var(--notification--color--primary--info);
  }

  &[data-type="success"] {
    --_accentColor: var(--notification--borderColor--success);
    --_iconColor: var(--notification--borderColor--success);
    --_backgroundColor: var(--notification--backgroundColor--success);
    --_colorPrimary: var(--notification--color--primary--success);
  }

  &[data-type="caution"] {
    --_accentColor: var(--notification--borderColor--caution);
    --_iconColor: var(--notification--borderColor--caution);
    --_backgroundColor: var(--notification--backgroundColor--caution);
    --_colorPrimary: var(--notification--color--primary--caution);
  }

  &[data-type="danger"] {
    --_accentColor: var(--notification--borderColor--danger);
    --_iconColor: var(--notification--borderColor--danger);
    --_backgroundColor: var(--notification--backgroundColor--danger);
    --_colorPrimary: var(--notification--color--primary--danger);
  }
}

</style>